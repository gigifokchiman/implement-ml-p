---
# Backend API Service
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: ml-platform
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/component: api
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8000
      targetPort: 8000
  selector:
    app.kubernetes.io/name: backend
    app.kubernetes.io/component: api
---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: ml-platform
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/component: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: backend
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: backend
        app.kubernetes.io/component: api
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: backend
          image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/ml-platform/backend:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          env:
            - name: PORT
              value: "8000"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: url
            # S3 configuration for cloud environments
            - name: AWS_S3_BUCKET
              value: "ml-platform-data-lake"
            - name: AWS_S3_REGION
              value: "us-west-2"
            - name: AWS_DEFAULT_REGION
              value: "us-west-2"
            # AWS credentials will be provided via IAM roles (IRSA) in cloud environments
          ports:
            - name: http
              containerPort: 8000
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: { }
