# Enhanced Admission Controller for Real-time Security Policy Enforcement
# Integrates with ArgoCD and provides comprehensive security validation

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-policies
  namespace: data-platform-security-scanning
  labels:
    app.kubernetes.io/name: security-admission-controller
    app.kubernetes.io/component: policies
data:
  policies.yaml: |
    # Security policies configuration
    environments:
      local:
        security_level: "relaxed"
        require_security_context: false
        require_resource_limits: false
        allow_latest_images: true
        require_network_policies: false
      dev:
        security_level: "moderate"
        require_security_context: true
        require_resource_limits: false
        allow_latest_images: true
        require_network_policies: false
      staging:
        security_level: "strict"
        require_security_context: true
        require_resource_limits: true
        allow_latest_images: false
        require_network_policies: true
      prod:
        security_level: "strictest"
        require_security_context: true
        require_resource_limits: true
        allow_latest_images: false
        require_network_policies: true
        require_pod_security_standards: true

    # Image security policies
    allowed_registries:
      - "docker.io"
      - "gcr.io"
      - "quay.io"
      - "ghcr.io"
      - "registry.k8s.io"

    blocked_images:
      - "*:latest"  # Only in staging/prod
      - "nginx:alpine"  # Security vulnerabilities
      - "*:debug"
      - "*:devel"

    # Required security contexts
    required_security_context:
      runAsNonRoot: true
      runAsUser: 65534
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop: ["ALL"]

    # Required resource limits
    required_resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  webhook.py: |
    #!/usr/bin/env python3
    import json
    import base64
    import yaml
    import re
    from http.server import HTTPServer, BaseHTTPRequestHandler
    from urllib.parse import urlparse, parse_qs
    import ssl
    import logging

    # Configure logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    class SecurityAdmissionWebhook(BaseHTTPRequestHandler):
        def do_POST(self):
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)

            try:
                admission_review = json.loads(post_data.decode('utf-8'))
                response = self.validate_request(admission_review)

                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode('utf-8'))

            except Exception as e:
                logger.error(f"Webhook error: {e}")
                self.send_error(500, str(e))

        def validate_request(self, admission_review):
            request = admission_review.get('request', {})
            obj = request.get('object', {})
            namespace = request.get('namespace', 'default')

            # Get environment from namespace or labels
            environment = self.get_environment(obj, namespace)

            # Load security policies
            policies = self.load_policies()
            env_policy = policies.get('environments', {}).get(environment, {})

            # Validate object based on type
            allowed = True
            message = ""

            if obj.get('kind') == 'Pod':
                allowed, message = self.validate_pod(obj, env_policy, policies)
            elif obj.get('kind') in ['Deployment', 'StatefulSet', 'DaemonSet']:
                allowed, message = self.validate_workload(obj, env_policy, policies)

            # Build admission response
            response = {
                'apiVersion': 'admission.k8s.io/v1',
                'kind': 'AdmissionReview',
                'response': {
                    'uid': request.get('uid'),
                    'allowed': allowed,
                    'result': {
                        'status': 'Success' if allowed else 'Failure',
                        'message': message
                    }
                }
            }

            logger.info(f"Validation result: {allowed} - {message}")
            return response

        def get_environment(self, obj, namespace):
            # Try to get environment from labels
            labels = obj.get('metadata', {}).get('labels', {})

            # Check various label patterns
            env_labels = ['environment', 'env', 'tier', 'stage']
            for label in env_labels:
                if label in labels:
                    return labels[label]

            # Fallback to namespace pattern
            if 'prod' in namespace:
                return 'prod'
            elif 'staging' in namespace:
                return 'staging'
            elif 'dev' in namespace:
                return 'dev'
            else:
                return 'local'

        def validate_pod(self, pod, env_policy, policies):
            containers = pod.get('spec', {}).get('containers', [])

            for container in containers:
                # Validate container image
                allowed, message = self.validate_container_image(
                    container.get('image', ''), env_policy, policies
                )
                if not allowed:
                    return False, f"Container image validation failed: {message}"

                # Validate security context
                if env_policy.get('require_security_context', False):
                    allowed, message = self.validate_security_context(
                        container.get('securityContext', {}), policies
                    )
                    if not allowed:
                        return False, f"Security context validation failed: {message}"

                # Validate resource limits
                if env_policy.get('require_resource_limits', False):
                    allowed, message = self.validate_resources(
                        container.get('resources', {}), policies
                    )
                    if not allowed:
                        return False, f"Resource limits validation failed: {message}"

            return True, "Pod validation passed"

        def validate_workload(self, workload, env_policy, policies):
            # Extract pod template
            pod_template = workload.get('spec', {}).get('template', {})
            return self.validate_pod(pod_template, env_policy, policies)

        def validate_container_image(self, image, env_policy, policies):
            if not image:
                return False, "Container image not specified"

            # Check if latest tag is allowed
            if image.endswith(':latest') and not env_policy.get('allow_latest_images', False):
                return False, f"Latest tag not allowed in {env_policy.get('security_level', 'unknown')} environment"

            # Check allowed registries
            allowed_registries = policies.get('allowed_registries', [])
            if allowed_registries:
                registry_allowed = any(image.startswith(registry) for registry in allowed_registries)
                if not registry_allowed:
                    return False, f"Registry not in allowed list: {image}"

            # Check blocked images
            blocked_images = policies.get('blocked_images', [])
            for blocked_pattern in blocked_images:
                if self.matches_pattern(image, blocked_pattern):
                    return False, f"Image matches blocked pattern: {blocked_pattern}"

            return True, "Image validation passed"

        def validate_security_context(self, security_context, policies):
            required = policies.get('required_security_context', {})

            for key, expected_value in required.items():
                actual_value = security_context.get(key)
                if actual_value != expected_value:
                    return False, f"Required security context {key}={expected_value}, got {actual_value}"

            return True, "Security context validation passed"

        def validate_resources(self, resources, policies):
            required = policies.get('required_resources', {})

            # Check if requests and limits are specified
            if 'requests' not in resources or 'limits' not in resources:
                return False, "Resource requests and limits must be specified"

            return True, "Resource validation passed"

        def matches_pattern(self, text, pattern):
            # Simple glob pattern matching
            pattern = pattern.replace('*', '.*')
            return re.match(pattern, text) is not None

        def load_policies(self):
            # In a real implementation, this would load from ConfigMap
            # For now, return basic policies
            return {
                'environments': {
                    'local': {'security_level': 'relaxed', 'allow_latest_images': True},
                    'dev': {'security_level': 'moderate', 'allow_latest_images': True},
                    'staging': {'security_level': 'strict', 'allow_latest_images': False},
                    'prod': {'security_level': 'strictest', 'allow_latest_images': False}
                },
                'allowed_registries': ['docker.io', 'gcr.io', 'quay.io', 'ghcr.io'],
                'blocked_images': ['*:latest']
            }

    if __name__ == '__main__':
        server = HTTPServer(('0.0.0.0', 8443), SecurityAdmissionWebhook)

        # Configure TLS
        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
        context.load_cert_chain('/etc/certs/tls.crt', '/etc/certs/tls.key')
        server.socket = context.wrap_socket(server.socket, server_side=True)

        logger.info("Security Admission Webhook listening on port 8443")
        server.serve_forever()

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enhanced-security-admission-webhook
  namespace: data-platform-security-scanning
  labels:
    app.kubernetes.io/name: enhanced-security-admission-webhook
    app.kubernetes.io/component: admission-controller
spec:
  replicas: 2  # High availability
  selector:
    matchLabels:
      app.kubernetes.io/name: enhanced-security-admission-webhook
  template:
    metadata:
      labels:
        app.kubernetes.io/name: enhanced-security-admission-webhook
        app.kubernetes.io/component: admission-controller
    spec:
      serviceAccountName: security-admission-webhook
      priorityClassName: security-critical
      containers:
        - name: webhook
          image: python:3.11-slim
          command: [ "python3", "/app/webhook.py" ]
          ports:
            - containerPort: 8443
              name: webhook
          env:
            - name: TLS_CERT_FILE
              value: "/etc/certs/tls.crt"
            - name: TLS_KEY_FILE
              value: "/etc/certs/tls.key"
          volumeMounts:
            - name: certs
              mountPath: /etc/certs
              readOnly: true
            - name: policies
              mountPath: /etc/policies
              readOnly: true
            - name: app
              mountPath: /app
              readOnly: true
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /health
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
      volumes:
        - name: certs
          secret:
            secretName: webhook-certs
        - name: policies
          configMap:
            name: security-policies
        - name: app
          configMap:
            name: security-policies
            items:
              - key: webhook.py
                path: webhook.py
                mode: 0755

---
apiVersion: v1
kind: Service
metadata:
  name: enhanced-security-admission-webhook
  namespace: data-platform-security-scanning
  labels:
    app.kubernetes.io/name: enhanced-security-admission-webhook
spec:
  selector:
    app.kubernetes.io/name: enhanced-security-admission-webhook
  ports:
    - port: 443
      targetPort: 8443
      name: webhook

---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: enhanced-security-admission-webhook
  labels:
    app.kubernetes.io/name: enhanced-security-admission-webhook
webhooks:
  - name: pod-security.security.platform
    clientConfig:
      service:
        name: enhanced-security-admission-webhook
        namespace: data-platform-security-scanning
        path: "/validate"
    rules:
      - operations: [ "CREATE", "UPDATE" ]
        apiGroups: [ "" ]
        apiVersions: [ "v1" ]
        resources: [ "pods" ]
      - operations: [ "CREATE", "UPDATE" ]
        apiGroups: [ "apps" ]
        apiVersions: [ "v1" ]
        resources: [ "deployments", "statefulsets", "daemonsets" ]
    namespaceSelector:
      matchLabels:
        security-policy: "enabled"
    admissionReviewVersions: [ "v1", "v1beta1" ]
    sideEffects: None
    failurePolicy: Fail  # Block deployments if webhook fails
