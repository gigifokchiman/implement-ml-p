apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-config
  namespace: security-scanning
data:
  falco.yaml: |
    rules_file:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/falco_rules.local.yaml
      - /etc/falco/k8s_audit_rules.yaml
      - /etc/falco/rules.d

    json_output: true
    json_include_output_property: true

    log_stderr: true
    log_syslog: false
    log_level: info

    outputs:
      rate: 1
      max_burst: 1000

    stdout_output:
      enabled: true

    webserver:
      enabled: true
      listen_port: 8765
      k8s_audit_endpoint: /k8s-audit
      ssl_enabled: false

    program_output:
      enabled: false
      keep_alive: false
      program: "jq '{text: .output}' | curl -d @- -X POST https://hooks.slack.com/services/XXX"

    grpc:
      enabled: false

    grpc_output:
      enabled: false
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco
  namespace: security-scanning
  labels:
    app.kubernetes.io/name: falco
    app.kubernetes.io/component: runtime-security
    app.kubernetes.io/part-of: security-scanning
  annotations:
    argocd.argoproj.io/sync-options: Delete=false
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: falco
      app.kubernetes.io/component: runtime-security
  template:
    metadata:
      labels:
        app.kubernetes.io/name: falco
        app.kubernetes.io/component: runtime-security
        app.kubernetes.io/part-of: security-scanning
    spec:
      serviceAccountName: security-scanner
      priorityClassName: security-critical
      hostNetwork: true
      hostPID: true
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      containers:
        - name: falco
          image: falcosecurity/falco-no-driver:0.36.2
          args:
            - /usr/bin/falco
            - --cri
            - /run/containerd/containerd.sock
            - -K
            - /var/run/secrets/kubernetes.io/serviceaccount/token
            - -k
            - https://$(KUBERNETES_SERVICE_HOST)
            - --k8s-api-cert
            - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - -pk
          env:
            - name: FALCO_K8S_API_CERT
              value: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
            - name: FALCO_BPF_PROBE
              value: ""
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /host/var/run/docker.sock
              name: docker-socket
            - mountPath: /host/run/containerd/containerd.sock
              name: containerd-socket
            - mountPath: /host/dev
              name: dev-fs
              readOnly: true
            - mountPath: /host/proc
              name: proc-fs
              readOnly: true
            - mountPath: /host/boot
              name: boot-fs
              readOnly: true
            - mountPath: /host/lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /host/usr
              name: usr-fs
              readOnly: true
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
            - mountPath: /etc/falco
              name: config-volume
            - mountPath: /etc/falco/rules.d
              name: custom-rules
              readOnly: true
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          ports:
            - containerPort: 8765
              name: http
              protocol: TCP
      volumes:
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: containerd-socket
          hostPath:
            path: /run/containerd/containerd.sock
        - name: dev-fs
          hostPath:
            path: /dev
        - name: proc-fs
          hostPath:
            path: /proc
        - name: boot-fs
          hostPath:
            path: /boot
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: usr-fs
          hostPath:
            path: /usr
        - name: etc-fs
          hostPath:
            path: /etc
        - name: config-volume
          configMap:
            name: falco-config
        - name: custom-rules
          configMap:
            name: falco-custom-rules
            optional: true
---
apiVersion: v1
kind: Service
metadata:
  name: falco
  namespace: security-scanning
  labels:
    app.kubernetes.io/name: falco
    app.kubernetes.io/component: runtime-security
spec:
  selector:
    app.kubernetes.io/name: falco
    app.kubernetes.io/component: runtime-security
  ports:
    - port: 8765
      targetPort: 8765
      name: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-custom-rules
  namespace: security-scanning
data:
  custom-rules.yaml: |
    # Custom rules for the platform
    - rule: Terminal shell in container
      desc: A shell was used as the entrypoint/exec point into a container
      condition: >
        spawned_process and container
        and shell_procs and proc.tty != 0
        and not container.image.repository in (trusted_images)
      output: >
        A shell was spawned in a container (user=%user.name container_id=%container.id
        container_name=%container.name shell=%proc.name parent=%proc.pname cmdline=%proc.cmdline)
      priority: WARNING
      tags: [container, shell]

    - rule: Unexpected network connection
      desc: Detect unexpected network connections from containers
      condition: >
        inbound and container
        and fd.sport >= 30000
        and not fd.sip in (allowed_ips)
      output: >
        Unexpected network connection (command=%proc.cmdline connection=%fd.name
        container_id=%container.id image=%container.image.repository)
      priority: WARNING
      tags: [network, container]
