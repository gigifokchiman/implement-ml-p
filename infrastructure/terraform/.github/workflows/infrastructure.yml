name: Infrastructure CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/terraform/**'

env:
  TF_VERSION: '1.5.7'
  TF_WORKING_DIR: './infrastructure/terraform'

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          for env in environments/*/; do
            if [[ $(basename "$env") != "_shared" ]]; then
              echo "Initializing $env"
              cd "$env"
              terraform init -backend=false
              cd ../..
            fi
          done

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          for env in environments/*/; do
            if [[ $(basename "$env") != "_shared" ]]; then
              echo "Validating $env"
              cd "$env"
              terraform validate
              cd ../..
            fi
          done

      - name: Run Tests
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          chmod +x tests/run-tests.sh
          ./tests/run-tests.sh validate

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.TF_WORKING_DIR }}
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ${{ env.TF_WORKING_DIR }}
          soft_fail: true

  plan-local:
    name: Plan Local Environment
    runs-on: ubuntu-latest
    needs: [ validate, security ]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}/environments/local
        run: terraform init -backend=false

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}/environments/local
        run: |
          terraform plan -var-file="terraform.tfvars" -no-color

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [ validate, security ]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}/environments/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}/environments/dev
        run: terraform plan -var-file="terraform.tfvars"

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}/environments/dev
        run: terraform apply -var-file="terraform.tfvars" -auto-approve

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ validate, security ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}/environments/staging
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}/environments/staging
        run: terraform plan -var-file="terraform.tfvars"

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}/environments/staging
        run: terraform apply -var-file="terraform.tfvars" -auto-approve

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [ deploy-staging ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}/environments/prod
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}/environments/prod
        run: terraform plan -var-file="terraform.tfvars"

      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: team-leads
          minimum-approvals: 2
          issue-title: "Production Deployment Approval"
          issue-body: "Please review and approve the production deployment."

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}/environments/prod
        run: terraform apply -var-file="terraform.tfvars" -auto-approve
