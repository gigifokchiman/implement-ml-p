kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: ${CLUSTER_NAME}
nodes:
  - role: control-plane
    image: kindest/node:v${K8S_VERSION}
    kubeadmConfigPatches:
      - |
        kind: InitConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "ingress-ready=true"
            rotate-certificates: "true"
            system-reserved: "${CONTROL_PLANE_SYSTEM_RESERVED}"
            kube-reserved: "${CONTROL_PLANE_KUBE_RESERVED}"
      - |
        kind: ClusterConfiguration
        apiServer:
          extraArgs:
            enable-bootstrap-token-auth: "true"
            audit-log-maxage: "${AUDIT_LOG_MAXAGE}"
            audit-log-maxbackup: "${AUDIT_LOG_MAXBACKUP}"
            audit-log-maxsize: "${AUDIT_LOG_MAXSIZE}"
            audit-log-path: "/var/log/kubernetes/audit.log"
        controllerManager:
          extraArgs:
            cluster-signing-cert-file: /etc/kubernetes/pki/ca.crt
            cluster-signing-key-file: /etc/kubernetes/pki/ca.key
            bind-address: "0.0.0.0"
        scheduler:
          extraArgs:
            bind-address: "0.0.0.0"
      - |
        kind: KubeletConfiguration
        serverTLSBootstrap: true
        rotateCertificates: true
        cgroupDriver: systemd
        containerRuntimeEndpoint: unix:///run/containerd/containerd.sock
    extraPortMappings:
      # Ingress HTTP
      - containerPort: 80
        hostPort: 80
        protocol: TCP
      # Ingress HTTPS
      - containerPort: 443
        hostPort: 443
        protocol: TCP
    extraMounts:
      - hostPath: ${LOGS_DIR}
        containerPath: /var/log

  - role: worker
    image: kindest/node:v${K8S_VERSION}
    labels:
      node-type: compute
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            rotate-certificates: "true"
            node-labels: "node-type=compute"
            system-reserved: "${WORKER_NODE_SYSTEM_RESERVED}"
            kube-reserved: "${WORKER_NODE_KUBE_RESERVED}"
      - |
        kind: KubeletConfiguration
        serverTLSBootstrap: true
        rotateCertificates: true
        cgroupDriver: systemd
        containerRuntimeEndpoint: unix:///run/containerd/containerd.sock
  - role: worker
    image: kindest/node:v${K8S_VERSION}
    labels:
      node-type: ml
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            rotate-certificates: "true"
            node-labels: "node-type=ml"
            system-reserved: "${ML_NODE_SYSTEM_RESERVED}"
            kube-reserved: "${ML_NODE_KUBE_RESERVED}"
      - |
        kind: KubeletConfiguration
        serverTLSBootstrap: true
        rotateCertificates: true
        cgroupDriver: systemd
        containerRuntimeEndpoint: unix:///run/containerd/containerd.sock
  - role: worker
    image: kindest/node:v${K8S_VERSION}
    labels:
      node-type: storage
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            rotate-certificates: "true"
            node-labels: "node-type=storage"
            system-reserved: "${WORKER_NODE_SYSTEM_RESERVED}"
            kube-reserved: "${WORKER_NODE_KUBE_RESERVED}"
      - |
        kind: KubeletConfiguration
        serverTLSBootstrap: true
        rotateCertificates: true
        cgroupDriver: systemd
        containerRuntimeEndpoint: unix:///run/containerd/containerd.sock
networking:
  apiServerAddress: "127.0.0.1"
  apiServerPort: 6443
  podSubnet: "${POD_SUBNET}"
  serviceSubnet: "${SERVICE_SUBNET}"
  disableDefaultCNI: false
  kubeProxyMode: "iptables"
containerdConfigPatches:
  - |-
    [plugins."io.containerd.grpc.v1.cri".registry]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:${REGISTRY_PORT}"]
          endpoint = ["http://${REGISTRY_NAME}:${REGISTRY_PORT}"]
    [plugins."io.containerd.grpc.v1.cri".registry.configs]
      [plugins."io.containerd.grpc.v1.cri".registry.configs."${REGISTRY_NAME}:${REGISTRY_PORT}".tls]
        insecure_skip_verify = true
featureGates:
  EphemeralContainers: true
  GracefulNodeShutdown: true