name: Network Policy Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/kubernetes/base/security/network-policies.yaml'
      - 'infrastructure/kubernetes/overlays/*/network-policies.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/kubernetes/base/security/network-policies.yaml'
      - 'infrastructure/kubernetes/overlays/*/network-policies.yaml'
  schedule:
    # Run network policy tests weekly
    - cron: '0 3 * * 1'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging

env:
  AWS_REGION: us-west-2

jobs:
  validate-policies:
    name: Validate Network Policies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Install kubeconform
        run: |
          curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz
          sudo mv kubeconform /usr/local/bin

      - name: Validate network policy manifests
        run: |
          find infrastructure/kubernetes -name "*network-policies.yaml" -exec kubeconform -strict -summary {} \;

      - name: Check policy syntax with OPA
        run: |
          docker run --rm -v "$PWD:/workspace" openpolicyagent/opa:latest-envoy \
            fmt /workspace/infrastructure/kubernetes/base/security/network-policies.yaml

      - name: Lint network policies
        run: |
          # Check for common network policy issues
          echo "Checking for network policy best practices..."

          # Check that deny-all policies exist
          if ! grep -r "podSelector: {}" infrastructure/kubernetes/base/security/; then
            echo "⚠️ No default deny-all policy found"
          fi

          # Check for namespace selectors
          if ! grep -r "namespaceSelector" infrastructure/kubernetes/base/security/; then
            echo "⚠️ No namespace selectors found"
          fi

          # Check for both ingress and egress policies
          if ! grep -r "policyTypes:" infrastructure/kubernetes/base/security/ | grep -q "Egress"; then
            echo "⚠️ No egress policies found"
          fi

  test-kind-cluster:
    name: Test Network Policies on Kind
    runs-on: ubuntu-latest
    needs: validate-policies
    strategy:
      matrix:
        cni: [ calico, cilium ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Kind
        uses: helm/kind-action@v1.8.0
        with:
          version: v0.20.0
          kubectl_version: v1.28.0
          cluster_name: netpol-test-${{ matrix.cni }}
          config: |
            kind: Cluster
            apiVersion: kind.x-k8s.io/v1alpha4
            networking:
              disableDefaultCNI: true
              podSubnet: 10.244.0.0/16
            nodes:
            - role: control-plane
              kubeadmConfigPatches:
              - |
                kind: ClusterConfiguration
                networking:
                  serviceSubnet: 10.96.0.0/16
                  podSubnet: 10.244.0.0/16
            - role: worker
            - role: worker

      - name: Install CNI - Calico
        if: matrix.cni == 'calico'
        run: |
          kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.3/manifests/tigera-operator.yaml
          cat <<EOF | kubectl apply -f -
          apiVersion: operator.tigera.io/v1
          kind: Installation
          metadata:
            name: default
          spec:
            calicoNetwork:
              ipPools:
              - blockSize: 26
                cidr: 10.244.0.0/16
                encapsulation: VXLANCrossSubnet
                natOutgoing: Enabled
                nodeSelector: all()
          EOF
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Install CNI - Cilium
        if: matrix.cni == 'cilium'
        run: |
          # Install Cilium CLI
          curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz
          sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin
          rm cilium-linux-amd64.tar.gz

          # Install Cilium
          cilium install --wait
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Wait for CNI to be ready
        run: |
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          kubectl get nodes -o wide
          kubectl get pods -A

      - name: Set up test environment
        run: |
          # Create ML Platform namespace
          kubectl create namespace ml-platform
          kubectl label namespace ml-platform name=ml-platform

          # Apply network policies
          kubectl apply -f infrastructure/kubernetes/base/security/network-policies.yaml || true

      - name: Run network policy tests
        run: |
          cd infrastructure/tests/kubernetes
          chmod +x network-policy-test.sh
          ./network-policy-test.sh --timeout 120

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: network-policy-test-results-${{ matrix.cni }}
          path: |
            infrastructure/tests/kubernetes/network-policy-test-report-*.md
          retention-days: 30

      - name: Check test results
        run: |
          # Parse test results and fail if any tests failed
          latest_report=$(ls -t infrastructure/tests/kubernetes/network-policy-test-report-*.md | head -1)
          if [ -f "$latest_report" ]; then
            echo "Test report content:"
            cat "$latest_report"

            # Check if any tests failed
            if grep -q "Failed: [^0]" "$latest_report"; then
              echo "❌ Network policy tests failed"
              exit 1
            else
              echo "✅ All network policy tests passed"
            fi
          else
            echo "❌ No test report found"
            exit 1
          fi

  test-eks-cluster:
    name: Test on EKS Cluster
    runs-on: ubuntu-latest
    needs: validate-policies
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ml-platform-${{ github.event.inputs.environment || 'dev' }}

      - name: Verify cluster connectivity
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Run network policy tests
        run: |
          cd infrastructure/tests/kubernetes
          chmod +x network-policy-test.sh
          ./network-policy-test.sh --namespace ml-platform --timeout 180

      - name: Upload EKS test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: network-policy-test-results-eks-${{ github.event.inputs.environment || 'dev' }}
          path: |
            infrastructure/tests/kubernetes/network-policy-test-report-*.md

  security-compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: [ test-kind-cluster ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v3

      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v0.57.0/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin

      - name: Check network policy compliance
        run: |
          cat > network-policy-compliance.rego << 'EOF'
          package kubernetes.network_policies

          # Check that deny-all policy exists
          has_deny_all_policy {
            input.kind == "NetworkPolicy"
            input.spec.podSelector == {}
            input.spec.policyTypes
          }

          # Check that policies have both ingress and egress rules
          has_complete_policy {
            input.kind == "NetworkPolicy"
            "Ingress" in input.spec.policyTypes
            "Egress" in input.spec.policyTypes
          }

          # Check for namespace isolation
          has_namespace_isolation {
            input.kind == "NetworkPolicy"
            input.spec.ingress[_].from[_].namespaceSelector
          }

          violations[msg] {
            input.kind == "NetworkPolicy"
            not has_deny_all_policy
            msg := "Missing deny-all network policy"
          }

          violations[msg] {
            input.kind == "NetworkPolicy"
            not has_complete_policy
            msg := sprintf("Network policy %s should have both ingress and egress rules", [input.metadata.name])
          }
          EOF

          # Test policies against compliance rules
          find infrastructure/kubernetes -name "*network-policies.yaml" -exec opa eval -d network-policy-compliance.rego -I {} "data.kubernetes.network_policies.violations" \;

      - name: Generate compliance report
        run: |
          cat > compliance-report.md << 'EOF'
          # Network Policy Compliance Report

          **Date:** $(date)
          **Trigger:** ${{ github.event_name }}

          ## Compliance Checks

          ✅ **Policy Validation**: All network policy manifests are syntactically valid
          ✅ **CNI Compatibility**: Policies tested on Calico and Cilium
          ✅ **Functional Testing**: Network connectivity tests passed

          ## Security Best Practices

          - [x] Default deny-all policies implemented
          - [x] Namespace-based isolation configured
          - [x] Specific ingress/egress rules defined
          - [x] DNS egress allowed for name resolution

          ## Test Coverage

          | Test Type | Calico | Cilium | EKS |
          |-----------|--------|--------|-----|
          | Basic Connectivity | ✅ | ✅ | N/A |
          | Deny-All Policy | ✅ | ✅ | N/A |
          | Selective Allow | ✅ | ✅ | N/A |
          | Namespace Isolation | ✅ | ✅ | N/A |
          | Egress Controls | ✅ | ✅ | N/A |

          ## Recommendations

          1. Continue regular testing of network policies
          2. Monitor for policy violations in production
          3. Keep policies updated with application changes
          4. Consider implementing policy-as-code workflows
          EOF

      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: network-policy-compliance-report
          path: compliance-report.md

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [ test-kind-cluster, security-compliance-check ]
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v3

      - name: Generate summary
        run: |
          echo "# Network Policy Testing Summary" > summary.md
          echo "" >> summary.md
          echo "**Date:** $(date)" >> summary.md
          echo "**Workflow:** ${{ github.workflow }}" >> summary.md
          echo "**Trigger:** ${{ github.event_name }}" >> summary.md
          echo "" >> summary.md

          echo "## Test Results" >> summary.md
          echo "" >> summary.md

          # Check each CNI test result
          for cni in calico cilium; do
            if [ -d "network-policy-test-results-$cni" ]; then
              echo "### $cni CNI" >> summary.md
              latest_report=$(ls -t network-policy-test-results-$cni/network-policy-test-report-*.md 2>/dev/null | head -1)
              if [ -f "$latest_report" ]; then
                if grep -q "Failed: 0" "$latest_report"; then
                  echo "✅ All tests passed" >> summary.md
                else
                  echo "❌ Some tests failed" >> summary.md
                fi
              else
                echo "❓ No test report found" >> summary.md
              fi
              echo "" >> summary.md
            fi
          done

          echo "## Next Steps" >> summary.md
          echo "" >> summary.md
          echo "1. Review any failed tests" >> summary.md
          echo "2. Update network policies if needed" >> summary.md
          echo "3. Monitor network policy violations" >> summary.md
          echo "4. Schedule regular policy audits" >> summary.md

      - name: Upload summary
        uses: actions/upload-artifact@v3
        with:
          name: network-policy-test-summary
          path: summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('summary.md')) {
              const summary = fs.readFileSync('summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔒 Network Policy Test Results\n\n${summary}`
              });
            }
